	char passwd[100]; 
	char ba[99];   
	for( int iTemp = 0;iTemp==99;iTemp++){
            if (passwd[iTemp]=='\n'){		
		}
	     else
		ba[iTemp] = passwd[iTemp=1];
	
    char version = line[0];
 
    if (version !=3) {  //we only work with version 3
        m_lastError = ErrorUnknownVersion;
        qWarning() << "Invalid version or not a cyphertext.";
        return QByteArray();
    }
 
    CryptoFlags flags = line[1];
 
    ba = ba.mid(2);
    int pos(0);
    int cnt(ba.count());
    char lastChar = 0;
 
    while (pos < cnt) {
        char currentChar = ba[pos];
        ba[pos] = ba.at(pos) ^ lastChar ^ m_keyParts.at(pos % 8);
        lastChar = currentChar;
        ++pos;
    }
 
    ba = ba.mid(1); //chop off the random number at the start
 
    bool integrityOk(true);
    if (flags.testFlag(CryptoFlagChecksum)) {
        if (ba.length() < 2) {
            m_lastError = ErrorIntegrityFailed;
            return QByteArray();
        }
        quint16 storedChecksum;
        {
            QDataStream s(&ba, QIODevice::ReadOnly);
            s >> storedChecksum;
        }
        ba = ba.mid(2);
        quint16 checksum = qChecksum(ba.constData(), ba.length());
        integrityOk = (checksum == storedChecksum);
    } else if (flags.testFlag(CryptoFlagHash)) {
        if (ba.length() < 20) {
            m_lastError = ErrorIntegrityFailed;
            return QByteArray();
        }
        QByteArray storedHash = ba.left(20);
        ba = ba.mid(20);
        QCryptographicHash hash(QCryptographicHash::Sha1);
        hash.addData(ba);
        integrityOk = (hash.result() == storedHash);
    }
 
    if (!integrityOk) {
        m_lastError = ErrorIntegrityFailed;
        return QByteArray();
    }
 
    if (flags.testFlag(CryptoFlagCompression))
        ba = qUncompress(ba);
 
    m_lastError = ErrorNoError;
    return ba;
