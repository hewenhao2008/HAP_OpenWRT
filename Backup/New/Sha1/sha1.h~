#ifndef SHA1_H_A545E61D43E9404E8D736869AB3CBFE7
#define SHA1_H_A545E61D43E9404E8D736869AB3CBFE7

#include <memory.h>
#include <limits.h>

#ifndef UINT_8
#define UINT_8 unsigned __int8
#endif

typedef union
{
	UINT_8 c[64];
	UINT_32 l[16];
} SHA1_WORKSPACE_BLOCK;

class CSHA1
{
public:
	// Constructor and destructor
	CSHA1();

	~CSHA1();

	void Reset();

	// Hash in binary data and strings
	void Update(const UINT_8* pbData, UINT_32 uLen);

	// Finalize hash; call it before using ReportHash(Stl)
	void Final();

	// Get the raw message digest (20 bytes)
	bool GetHash(UINT_8* pbDest20) const;

private:
	// Private SHA-1 transformation
	void Transform(UINT_32* pState, const UINT_8* pBuffer);

	// Member variables
	UINT_32 m_state[5];
	UINT_32 m_count[2];
	UINT_32 m_reserved0[1]; // Memory alignment padding
	UINT_8 m_buffer[64];
	UINT_8 m_digest[20];
	UINT_32 m_reserved1[3]; // Memory alignment padding

	UINT_8 m_workspace[64];
	SHA1_WORKSPACE_BLOCK* m_block; // SHA1 pointer to the byte array above
};

#endif // SHA1_H_A545E61D43E9404E8D736869AB3CBFE7
